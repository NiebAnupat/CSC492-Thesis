// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using DentalClinicServer.Helpers;
using DentalClinicServer.Models;
using Microsoft.EntityFrameworkCore;

namespace DentalClinicServer.Data;

public partial class AppDBContext : DbContext
{
    public AppDBContext()
    {
    }

    public AppDBContext(DbContextOptions<AppDBContext> options)
        : base(options)
    {
    }

    public override int SaveChanges()
    {
        var auditEntries = OnBeforeSaveChanges();
        OnAfterSaveChanges(auditEntries);
        var result = base.SaveChanges();
        return result;
    }

    private List<AuditEntry> OnBeforeSaveChanges()
    {
        var auditEntries = new List<AuditEntry>();

        foreach (var entry in ChangeTracker.Entries())
        {
            if (entry.Entity is AuditLog || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                continue;

            var auditEntry = new AuditEntry(entry);
            auditEntry.TableName = entry.Entity.GetType().Name;
            auditEntries.Add(auditEntry);

            foreach (var property in entry.Properties)
            {
                if (property.IsTemporary) continue;

                string propertyName = property.Metadata.Name;

                if (entry.State == EntityState.Added)
                {
                    auditEntry.NewValues[propertyName] = property.CurrentValue;
                }
                else if (entry.State == EntityState.Deleted)
                {
                    auditEntry.OldValues[propertyName] = property.OriginalValue;
                }
                else if (entry.State == EntityState.Modified && property.IsModified)
                {
                    auditEntry.OldValues[propertyName] = property.OriginalValue;
                    auditEntry.NewValues[propertyName] = property.CurrentValue;
                }
            }
        }

        return auditEntries.Where(ae => !ae.HasTemporaryProperties).ToList();
    }

    private void OnAfterSaveChanges(List<AuditEntry> auditEntries)
    {
        if (auditEntries == null || auditEntries.Count == 0) return;

        foreach (var auditEntry in auditEntries)
        {
            var auditLog = new AuditLog
            {
                AuditActionId = Method.GetActionId(auditEntry.Entry.State),
                BranchId = Method.GetBranchId(), // Fetch current BranchId
                TableName = auditEntry.TableName,
                RecordId = Method.GetRecordId(auditEntry.Entry), // Get primary key of the entity
                ColumnName = string.Join(",", auditEntry.ChangedColumns),
                OldValue = auditEntry.OldValues.Count > 0 ? Method.SerializeObject(auditEntry.OldValues) : null,
                NewValue = auditEntry.NewValues.Count > 0 ? Method.SerializeObject(auditEntry.NewValues) : null,
                Remark = "",
                CreatedByUserTypeId = Method.GetCurrentUserTypeId(), // Get user type ID
                CreatedByUserId = Method.GetCurrentUserId(), // Get user ID
                CreatedAt = DateTime.UtcNow,
                IsActive = true
            };

            AuditLogs.Add(auditLog);
        }

        base.SaveChanges();
    }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<AppointmentStatus> AppointmentStatuses { get; set; }

    public virtual DbSet<AuditAction> AuditActions { get; set; }

    public virtual DbSet<AuditLog> AuditLogs { get; set; }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Clinic> Clinics { get; set; }

    public virtual DbSet<ClinicStock> ClinicStocks { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerSubscription> CustomerSubscriptions { get; set; }

    public virtual DbSet<Dentist> Dentists { get; set; }

    public virtual DbSet<DentistWorkDay> DentistWorkDays { get; set; }

    public virtual DbSet<DispensingMedicine> DispensingMedicines { get; set; }

    public virtual DbSet<District> Districts { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<ExpertType> ExpertTypes { get; set; }

    public virtual DbSet<Gender> Genders { get; set; }

    public virtual DbSet<LabVender> LabVenders { get; set; }

    public virtual DbSet<Medicine> Medicines { get; set; }

    public virtual DbSet<OperationType> OperationTypes { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<PatientTag> PatientTags { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentDetail> PaymentDetails { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductType> ProductTypes { get; set; }

    public virtual DbSet<ProviderType> ProviderTypes { get; set; }

    public virtual DbSet<Province> Provinces { get; set; }

    public virtual DbSet<RequistionProduct> RequistionProducts { get; set; }

    public virtual DbSet<StockType> StockTypes { get; set; }

    public virtual DbSet<SubDistrict> SubDistricts { get; set; }

    public virtual DbSet<TagList> TagLists { get; set; }

    public virtual DbSet<Treatment> Treatments { get; set; }

    public virtual DbSet<TreatmentDocument> TreatmentDocuments { get; set; }

    public virtual DbSet<TreatmentLab> TreatmentLabs { get; set; }

    public virtual DbSet<TreatmentNextVisit> TreatmentNextVisits { get; set; }

    public virtual DbSet<TreatmentOperation> TreatmentOperations { get; set; }

    public virtual DbSet<TreatmentRecordEditHistory> TreatmentRecordEditHistories { get; set; }

    public virtual DbSet<TreatmentRecordField> TreatmentRecordFields { get; set; }

    public virtual DbSet<TreatmentRecordTemplat> TreatmentRecordTemplats { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseNpgsql("Host=localhost;Database=DentalClinic;Username=CatCode;Password=Q0MeooLzK0C0wYFDbDORmjx6iARGTPz4;Persist Security Info=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.AppointmentId).HasName("Appointment_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsCancelled).HasDefaultValue(false);
            entity.Property(e => e.IsCompleted).HasDefaultValue(false);
            entity.Property(e => e.IsConfirmed).HasDefaultValue(false);
            entity.Property(e => e.IsNotified).HasDefaultValue(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.AppointmentStatus).WithMany(p => p.Appointments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Appointment_AppointmentStatusId_fkey");

            entity.HasOne(d => d.Branch).WithMany(p => p.Appointments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Appointment_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.AppointmentCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Appointment_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.Dentist).WithMany(p => p.Appointments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Appointment_DentistId_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.Appointments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Appointment_PatientId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.AppointmentUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Appointment_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<AppointmentStatus>(entity =>
        {
            entity.HasKey(e => e.AppointmentStatusId).HasName("AppointmentStatus_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<AuditAction>(entity =>
        {
            entity.HasKey(e => e.AuditActionId).HasName("AuditAction_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.HasKey(e => e.AuditLogId).HasName("AuditLog_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.AuditAction).WithMany(p => p.AuditLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AuditLog_AuditActionId_fkey");

            entity.HasOne(d => d.Branch).WithMany(p => p.AuditLogs).HasConstraintName("AuditLog_BranchId_fkey");

            entity.HasOne(d => d.CreatedByUser).WithMany(p => p.AuditLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AuditLog_CreatedByUserId_fkey2");

            entity.HasOne(d => d.CreatedByUserNavigation).WithMany(p => p.AuditLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AuditLog_CreatedByUserId_fkey1");

            entity.HasOne(d => d.CreatedByUser1).WithMany(p => p.AuditLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AuditLog_CreatedByUserId_fkey");

            entity.HasOne(d => d.CreatedByUserType).WithMany(p => p.AuditLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("AuditLog_CreatedByUserTypeId_fkey");
        });

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.BranchId).HasName("Branch_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Telephone).IsFixedLength();
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Clinic).WithMany(p => p.Branches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Branch_ClinicId_fkey");

            entity.HasOne(d => d.UpdatedByCustomer).WithMany(p => p.Branches).HasConstraintName("Branch_UpdatedByCustomerId_fkey");
        });

        modelBuilder.Entity<Clinic>(entity =>
        {
            entity.HasKey(e => e.ClinicId).HasName("Clinic_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Telephone).IsFixedLength();
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.OwnerCustomer).WithMany(p => p.ClinicOwnerCustomers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Clinic_OwnerCustomerId_fkey");

            entity.HasOne(d => d.UpdatedByCustomer).WithMany(p => p.ClinicUpdatedByCustomers).HasConstraintName("Clinic_UpdatedByCustomerId_fkey");
        });

        modelBuilder.Entity<ClinicStock>(entity =>
        {
            entity.HasKey(e => e.ClinicStockId).HasName("ClinicStock_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Quantity).HasDefaultValue(0);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.ClinicStocks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ClinicStock_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.ClinicStockCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ClinicStock_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.Item).WithMany(p => p.ClinicStocks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ClinicStock_ItemId_fkey1");

            entity.HasOne(d => d.ItemNavigation).WithMany(p => p.ClinicStocks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ClinicStock_ItemId_fkey");

            entity.HasOne(d => d.StockType).WithMany(p => p.ClinicStocks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ClinicStock_StockTypeId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.ClinicStockUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ClinicStock_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("Customer_pkey");

            entity.Property(e => e.CitizenId).IsFixedLength();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Telephone).IsFixedLength();
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Gender).WithMany(p => p.Customers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Customer_GenderId_fkey");

            entity.HasOne(d => d.ProviderType).WithMany(p => p.Customers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Customer_ProviderTypeId_fkey");
        });

        modelBuilder.Entity<CustomerSubscription>(entity =>
        {
            entity.HasKey(e => e.CustomerSubscriptionId).HasName("CustomerSubscription_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerSubscriptions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CustomerSubscription_CustomerId_fkey");

            entity.HasOne(d => d.Package).WithMany(p => p.CustomerSubscriptions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CustomerSubscription_PackageId_fkey");
        });

        modelBuilder.Entity<Dentist>(entity =>
        {
            entity.HasKey(e => e.DentistId).HasName("Dentist_pkey");

            entity.Property(e => e.CitizenId).IsFixedLength();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Telephone).IsFixedLength();
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.Dentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Dentist_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.DentistCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Dentist_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.ExpertType).WithMany(p => p.Dentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Dentist_ExpertTypeId_fkey");

            entity.HasOne(d => d.Gender).WithMany(p => p.Dentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Dentist_GenderId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.DentistUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Dentist_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<DentistWorkDay>(entity =>
        {
            entity.HasKey(e => e.DentistWorkDayId).HasName("DentistWorkDay_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.DentistWorkDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DentistWorkDay_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.DentistWorkDayCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DentistWorkDay_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.Dentist).WithMany(p => p.DentistWorkDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DentistWorkDay_DentistId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.DentistWorkDayUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DentistWorkDay_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<DispensingMedicine>(entity =>
        {
            entity.HasKey(e => e.DispensingMedicineId).HasName("DispensingMedicine_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.DispensingMedicines)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DispensingMedicine_BranchId_fkey");

            entity.HasOne(d => d.ClinicStock).WithMany(p => p.DispensingMedicines)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DispensingMedicine_ClinicStockId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.DispensingMedicineCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DispensingMedicine_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.Treatment).WithMany(p => p.DispensingMedicines)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DispensingMedicine_TreatmentId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.DispensingMedicineUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DispensingMedicine_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<District>(entity =>
        {
            entity.HasKey(e => e.DistrictId).HasName("District_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.NameInEnglish).HasDefaultValueSql("''::character varying");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Province).WithMany(p => p.Districts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("District_ProvinceId_fkey");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.EmployeeId).HasName("Employee_pkey");

            entity.Property(e => e.CitizenId).IsFixedLength();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Telephone).IsFixedLength();
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Employee_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.InverseCreatedByEmployee)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Employee_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.Gender).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Employee_GenderId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.InverseUpdatedByEmployee)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Employee_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<ExpertType>(entity =>
        {
            entity.HasKey(e => e.ExpertTypeId).HasName("ExpertType_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<Gender>(entity =>
        {
            entity.HasKey(e => e.GenderId).HasName("Gender_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<LabVender>(entity =>
        {
            entity.HasKey(e => e.LabVenderId).HasName("LabVender_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Telephone).IsFixedLength();
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.LabVenders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("LabVender_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.LabVenderCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("LabVender_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.LabVenderUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("LabVender_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<Medicine>(entity =>
        {
            entity.HasKey(e => e.MedicineId).HasName("Medicine_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.Medicines)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Medicine_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.MedicineCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Medicine_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.MedicineUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Medicine_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<OperationType>(entity =>
        {
            entity.HasKey(e => e.OperationTypeId).HasName("OperationType_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.OperationTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("OperationType_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.OperationTypeCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("OperationType_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.OperationTypeUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("OperationType_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.HasKey(e => e.PackageId).HasName("Package_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.HasKey(e => e.PatientId).HasName("Patient_pkey");

            entity.Property(e => e.CitizenId).IsFixedLength();
            entity.Property(e => e.ContactPersonTelephone).IsFixedLength();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsPregnant).HasDefaultValue(false);
            entity.Property(e => e.Telephone).IsFixedLength();
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.Patients)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Patient_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.PatientCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Patient_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.Gender).WithMany(p => p.Patients)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Patient_GenderId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.PatientUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Patient_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<PatientTag>(entity =>
        {
            entity.HasKey(e => e.PatientTagId).HasName("PatientTag_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.PatientTagCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PatientTag_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.PatientTags)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PatientTag_PatientId_fkey");

            entity.HasOne(d => d.Tag).WithMany(p => p.PatientTags)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PatientTag_TagId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.PatientTagUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PatientTag_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("Payment_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.Payments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Payment_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.PaymentCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Payment_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.PaymentStatus).WithMany(p => p.Payments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Payment_PaymentStatusId_fkey");

            entity.HasOne(d => d.Treatment).WithMany(p => p.Payments).HasConstraintName("Payment_TreatmentId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.PaymentUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Payment_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<PaymentDetail>(entity =>
        {
            entity.HasKey(e => e.PaymentDetailId).HasName("PaymentDetail_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.PaymentMethodId).HasDefaultValue(1);
            entity.Property(e => e.Quantity).HasDefaultValue(1);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.ClinicStock).WithMany(p => p.PaymentDetails).HasConstraintName("PaymentDetail_ClinicStockId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.PaymentDetailCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PaymentDetail_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.OperationType).WithMany(p => p.PaymentDetails).HasConstraintName("PaymentDetail_OperationTypeId_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.PaymentDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PaymentDetail_PaymentId_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.PaymentDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PaymentDetail_PaymentMethodId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.PaymentDetailUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PaymentDetail_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId).HasName("PaymentMethod_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<PaymentStatus>(entity =>
        {
            entity.HasKey(e => e.PaymentStatusId).HasName("PaymentStatus_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("Product_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.Products)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Product_BranchId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.ProductCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Product_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.ProductType).WithMany(p => p.Products)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Product_ProductTypeId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.ProductUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Product_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<ProductType>(entity =>
        {
            entity.HasKey(e => e.ProductTypeId).HasName("ProductType_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<ProviderType>(entity =>
        {
            entity.HasKey(e => e.ProviderTypeId).HasName("ProviderType_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<Province>(entity =>
        {
            entity.HasKey(e => e.ProvinceId).HasName("Province_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.NameInEnglish).HasDefaultValueSql("''::character varying");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<RequistionProduct>(entity =>
        {
            entity.HasKey(e => e.RequistionProductId).HasName("RequistionProduct_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.RequistionProducts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RequistionProduct_BranchId_fkey");

            entity.HasOne(d => d.ClinicStock).WithMany(p => p.RequistionProducts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RequistionProduct_ClinicStockId_fkey");

            entity.HasOne(d => d.CreatedByEmployee).WithMany(p => p.RequistionProductCreatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RequistionProduct_CreatedByEmployeeId_fkey");

            entity.HasOne(d => d.UpdatedByEmployee).WithMany(p => p.RequistionProductUpdatedByEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RequistionProduct_UpdatedByEmployeeId_fkey");
        });

        modelBuilder.Entity<StockType>(entity =>
        {
            entity.HasKey(e => e.StockTypeId).HasName("StockType_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<SubDistrict>(entity =>
        {
            entity.HasKey(e => e.SubDistrictId).HasName("SubDistrict_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.NameInEnglish).HasDefaultValueSql("''::character varying");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.District).WithMany(p => p.SubDistricts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("SubDistrict_DistrictId_fkey");
        });

        modelBuilder.Entity<TagList>(entity =>
        {
            entity.HasKey(e => e.TagId).HasName("TagList_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.TagLists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TagList_BranchId_fkey");
        });

        modelBuilder.Entity<Treatment>(entity =>
        {
            entity.HasKey(e => e.TreatmentId).HasName("Treatment_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsNotifiedRecall).HasDefaultValue(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.Branch).WithMany(p => p.Treatments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Treatment_BranchId_fkey");

            entity.HasOne(d => d.CreatedByDentist).WithMany(p => p.TreatmentCreatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Treatment_CreatedByDentistId_fkey");

            entity.HasOne(d => d.Dentist).WithMany(p => p.TreatmentDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Treatment_DentistId_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.Treatments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Treatment_PatientId_fkey");

            entity.HasOne(d => d.UpdatedByDentist).WithMany(p => p.TreatmentUpdatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Treatment_UpdatedByDentistId_fkey");
        });

        modelBuilder.Entity<TreatmentDocument>(entity =>
        {
            entity.HasKey(e => e.TreatmentDocumentId).HasName("TreatmentDocument_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.CreatedByUser).WithMany(p => p.TreatmentDocumentCreatedByUsers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentDocument_CreatedByUserId_fkey2");

            entity.HasOne(d => d.CreatedByUserNavigation).WithMany(p => p.TreatmentDocumentCreatedByUserNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentDocument_CreatedByUserId_fkey1");

            entity.HasOne(d => d.CreatedByUser1).WithMany(p => p.TreatmentDocumentCreatedByUser1s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentDocument_CreatedByUserId_fkey");

            entity.HasOne(d => d.CreatedByUserType).WithMany(p => p.TreatmentDocumentCreatedByUserTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentDocument_CreatedByUserTypeId_fkey");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentDocuments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentDocument_TreatmentId_fkey");

            entity.HasOne(d => d.UpdatedByUser).WithMany(p => p.TreatmentDocumentUpdatedByUsers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentDocument_UpdatedByUserId_fkey2");

            entity.HasOne(d => d.UpdatedByUserNavigation).WithMany(p => p.TreatmentDocumentUpdatedByUserNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentDocument_UpdatedByUserId_fkey1");

            entity.HasOne(d => d.UpdatedByUser1).WithMany(p => p.TreatmentDocumentUpdatedByUser1s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentDocument_UpdatedByUserId_fkey");

            entity.HasOne(d => d.UpdatedByUserType).WithMany(p => p.TreatmentDocumentUpdatedByUserTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentDocument_UpdatedByUserTypeId_fkey");
        });

        modelBuilder.Entity<TreatmentLab>(entity =>
        {
            entity.HasKey(e => e.TreatmentLabId).HasName("TreatmentLab_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsReceived).HasDefaultValue(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.CreatedByDentist).WithMany(p => p.TreatmentLabCreatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentLab_CreatedByDentistId_fkey");

            entity.HasOne(d => d.LabVender).WithMany(p => p.TreatmentLabs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentLab_LabVenderId_fkey");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentLabs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentLab_TreatmentId_fkey");

            entity.HasOne(d => d.UpdatedByDentist).WithMany(p => p.TreatmentLabUpdatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentLab_UpdatedByDentistId_fkey");
        });

        modelBuilder.Entity<TreatmentNextVisit>(entity =>
        {
            entity.HasKey(e => e.TreatmentNextVisitId).HasName("TreatmentNextVisit_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsNotified).HasDefaultValue(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.CreatedByDentist).WithMany(p => p.TreatmentNextVisitCreatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentNextVisit_CreatedByDentistId_fkey");

            entity.HasOne(d => d.ExpertType).WithMany(p => p.TreatmentNextVisits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentNextVisit_ExpertTypeId_fkey");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentNextVisits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentNextVisit_TreatmentId_fkey");

            entity.HasOne(d => d.UpdatedByDentist).WithMany(p => p.TreatmentNextVisitUpdatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentNextVisit_UpdatedByDentistId_fkey");
        });

        modelBuilder.Entity<TreatmentOperation>(entity =>
        {
            entity.HasKey(e => e.TreatmentOperationId).HasName("TreatmentOperation_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Quantity).HasDefaultValue(1);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.CreatedByDentist).WithMany(p => p.TreatmentOperationCreatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentOperation_CreatedByDentistId_fkey");

            entity.HasOne(d => d.OperationType).WithMany(p => p.TreatmentOperations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentOperation_OperationTypeId_fkey");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentOperations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentOperation_TreatmentId_fkey");

            entity.HasOne(d => d.UpdatedByDentist).WithMany(p => p.TreatmentOperationUpdatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentOperation_UpdatedByDentistId_fkey");
        });

        modelBuilder.Entity<TreatmentRecordEditHistory>(entity =>
        {
            entity.HasKey(e => e.TreatmentRecordEditHistoryId).HasName("TreatmentRecordEditHistory_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.CreatedByDentist).WithMany(p => p.TreatmentRecordEditHistoryCreatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentRecordEditHistory_CreatedByDentistId_fkey");

            entity.HasOne(d => d.TreatmentRecord).WithMany(p => p.TreatmentRecordEditHistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentRecordEditHistory_TreatmentRecordId_fkey");

            entity.HasOne(d => d.UpdatedByDentist).WithMany(p => p.TreatmentRecordEditHistoryUpdatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentRecordEditHistory_UpdatedByDentistId_fkey");
        });

        modelBuilder.Entity<TreatmentRecordField>(entity =>
        {
            entity.HasKey(e => e.TreatmentRecordFieldId).HasName("TreatmentRecordField_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        modelBuilder.Entity<TreatmentRecordTemplat>(entity =>
        {
            entity.HasKey(e => e.TreatmentRecordId).HasName("TreatmentRecordTemplat_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");

            entity.HasOne(d => d.CreatedByDentist).WithMany(p => p.TreatmentRecordTemplatCreatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentRecordTemplat_CreatedByDentistId_fkey");

            entity.HasOne(d => d.TreatmentRecordField).WithMany(p => p.TreatmentRecordTemplats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentRecordTemplat_TreatmentRecordFieldId_fkey");

            entity.HasOne(d => d.UpdatedByDentist).WithMany(p => p.TreatmentRecordTemplatUpdatedByDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TreatmentRecordTemplat_UpdatedByDentistId_fkey");
        });

        modelBuilder.Entity<UserType>(entity =>
        {
            entity.HasKey(e => e.UserTypeId).HasName("UserType_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Create date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Update date");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
